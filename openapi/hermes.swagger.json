{
  "swagger": "2.0",
  "info": {
    "title": "Hermes",
    "description": "Getting started with the Hermes API:\n- Log in with `/v1/sessions/login` using your provided credentials. Click `Authorize` below and enter the returned token.\n- Create an application with `/v1/applications`. For SMS and software token authentication methods, all template fields can be left empty.\n- (Optional) Create an `AUTHENTICATOR` role API key with `/v1/sessions/keys`. Re-authorize using the returned token.\n\nActivate an identity (single occurrence):\n- Create an identity with `/v1/applications/{identity.appID}/identities`. Only one method field is supported when creating an identity.\n- Issue the returned identity a challenge with `/v1/applications/{appID}/identities/{id}/challenge`.\n- Activate the identity with `/v1/applications/{appID}/identities/{id}/activate` using the received or generated challenge.\n\nVerify an identity (ongoing):\n- Issue the identity a challenge with `/v1/applications/{appID}/identities/{id}/challenge`.\n- Verify the identity with `/v1/applications/{appID}/identities/{id}/verify` using the received or generated challenge.",
    "version": "1.1.7",
    "contact": {
      "name": "OwnMFA",
      "url": "https://www.ownmfa.com/",
      "email": "info@ownmfa.com"
    },
    "license": {
      "name": "ISC License",
      "url": "https://github.com/ownmfa/proto/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "AppIdentityService"
    },
    {
      "name": "EventService"
    },
    {
      "name": "OrgService"
    },
    {
      "name": "SessionService"
    },
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/applications": {
      "get": {
        "summary": "List all applications. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListAppsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of applications to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      },
      "post": {
        "summary": "Create an application. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app",
            "description": "App message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/App",
              "required": [
                "app"
              ]
            }
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/identities": {
      "get": {
        "summary": "List identities. Identities are used to challenge, activate, and verify external users.",
        "operationId": "AppIdentityService_ListIdentities2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListIdentitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of identities to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appID",
            "description": "Application ID (UUID). If not specified, all rules are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{app.id}": {
      "put": {
        "summary": "Update an application. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_UpdateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app.id",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "app",
            "description": "App message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orgID": {
                  "type": "string",
                  "description": "Organization ID (UUID).",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "Application name."
                },
                "displayName": {
                  "type": "string",
                  "description": "Application display name. Used anywhere the application is shown to an external user, including templates and notification sender fields."
                },
                "email": {
                  "type": "string",
                  "description": "Application email. Optional, used as the 'From' address in email notifications."
                },
                "pushoverKey": {
                  "type": "string",
                  "description": "Pushover application key. If not specified, the default OwnMFA Pushover application and templates will be used."
                },
                "subjectTemplate": {
                  "type": "string",
                  "description": "Application subject template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution is '{{.displayName}}'. Optional field, for notification methods that support subjects."
                },
                "textBodyTemplate": {
                  "type": "string",
                  "description": "Application text body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support text bodies. To prevent fraud, SMS notifications used a fixed body that includes the application display_name and verification code."
                },
                "htmlBodyTemplate": {
                  "type": "string",
                  "format": "byte",
                  "description": "Application HTML body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support HTML bodies. When used in JSON, the value will be represented as a base64 string."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Application creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Application modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "App message to update."
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      },
      "patch": {
        "summary": "Update an application. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_UpdateApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app.id",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "app",
            "description": "App message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orgID": {
                  "type": "string",
                  "description": "Organization ID (UUID).",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "Application name."
                },
                "displayName": {
                  "type": "string",
                  "description": "Application display name. Used anywhere the application is shown to an external user, including templates and notification sender fields."
                },
                "email": {
                  "type": "string",
                  "description": "Application email. Optional, used as the 'From' address in email notifications."
                },
                "pushoverKey": {
                  "type": "string",
                  "description": "Pushover application key. If not specified, the default OwnMFA Pushover application and templates will be used."
                },
                "subjectTemplate": {
                  "type": "string",
                  "description": "Application subject template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution is '{{.displayName}}'. Optional field, for notification methods that support subjects."
                },
                "textBodyTemplate": {
                  "type": "string",
                  "description": "Application text body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support text bodies. To prevent fraud, SMS notifications used a fixed body that includes the application display_name and verification code."
                },
                "htmlBodyTemplate": {
                  "type": "string",
                  "format": "byte",
                  "description": "Application HTML body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support HTML bodies. When used in JSON, the value will be represented as a base64 string."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Application creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Application modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "App message to update."
            }
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{appID}/identities": {
      "get": {
        "summary": "List identities. Identities are used to challenge, activate, and verify external users.",
        "operationId": "AppIdentityService_ListIdentities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListIdentitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID). If not specified, all rules are included.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of identities to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{appID}/identities/{id}": {
      "get": {
        "summary": "Get an identity by ID. Identities are used to challenge, activate, and verify external users.",
        "operationId": "AppIdentityService_GetIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Identity ID (UUID) to get. Identity method_oneof may be returned in simplified form.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      },
      "delete": {
        "summary": "Delete an identity by ID. Identities are used to challenge, activate, and verify external users.",
        "operationId": "AppIdentityService_DeleteIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Identity ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{appID}/identities/{id}/activate": {
      "put": {
        "summary": "Activate an identity following a challenge.",
        "operationId": "AppIdentityService_ActivateIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Identity ID (UUID) to activate.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateIdentityBody"
            }
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{appID}/identities/{id}/challenge": {
      "post": {
        "summary": "Issue a challenge to an identity.",
        "operationId": "AppIdentityService_ChallengeIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "202": {
            "description": "A successful response.",
            "schema": {}
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Identity ID (UUID) to issue challenge. The rate limit for methods that send notifications is one challenge per identity every 30 seconds.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{appID}/identities/{id}/verify": {
      "post": {
        "summary": "Verify an identity following a challenge.",
        "operationId": "AppIdentityService_VerifyIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Identity ID (UUID) to verify.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyIdentityBody"
            }
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{identity.appID}/identities": {
      "post": {
        "summary": "Create an identity. Identities are used to challenge, activate, and verify external users.",
        "operationId": "AppIdentityService_CreateIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateIdentityResponse"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateIdentityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "identity.appID",
            "description": "Application ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identity",
            "description": "Identity message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Identity ID (UUID).",
                  "readOnly": true
                },
                "orgID": {
                  "type": "string",
                  "description": "Organization ID (UUID).",
                  "readOnly": true
                },
                "comment": {
                  "type": "string",
                  "description": "Identity comment. This should be an opaque identifier known to the consuming application."
                },
                "status": {
                  "$ref": "#/definitions/IdentityStatus",
                  "description": "Identity status.",
                  "readOnly": true
                },
                "softwareHOTPMethod": {
                  "$ref": "#/definitions/SoftwareHOTPMethod",
                  "description": "Software HOTP method configuration."
                },
                "softwareTOTPMethod": {
                  "$ref": "#/definitions/SoftwareTOTPMethod",
                  "description": "Software TOTP method configuration."
                },
                "googleAuthHOTPMethod": {
                  "$ref": "#/definitions/GoogleAuthHOTPMethod",
                  "description": "Google Authenticator HOTP method configuration."
                },
                "googleAuthTOTPMethod": {
                  "$ref": "#/definitions/GoogleAuthTOTPMethod",
                  "description": "Google Authenticator TOTP method configuration."
                },
                "appleiOSTOTPMethod": {
                  "$ref": "#/definitions/AppleiOSTOTPMethod",
                  "description": "Apple iOS TOTP method configuration."
                },
                "hardwareHOTPMethod": {
                  "$ref": "#/definitions/HardwareHOTPMethod",
                  "description": "Hardware HOTP method configuration."
                },
                "hardwareTOTPMethod": {
                  "$ref": "#/definitions/HardwareTOTPMethod",
                  "description": "Hardware TOTP method configuration."
                },
                "smsMethod": {
                  "$ref": "#/definitions/SMSMethod",
                  "description": "SMS method configuration."
                },
                "pushoverMethod": {
                  "$ref": "#/definitions/PushoverMethod",
                  "description": "Pushover method configuration."
                },
                "emailMethod": {
                  "$ref": "#/definitions/EmailMethod",
                  "description": "Email method configuration."
                },
                "backupCodesMethod": {
                  "$ref": "#/definitions/BackupsCodesMethod",
                  "description": "Backups codes method configuration."
                },
                "securityQuestionsMethod": {
                  "$ref": "#/definitions/SecurityQuestionsMethod",
                  "description": "Security questions method configuration."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Identity creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Identity modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "Identity message to create.",
              "required": [
                "comment"
              ]
            }
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/applications/{id}": {
      "get": {
        "summary": "Get an application by ID. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Application ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      },
      "delete": {
        "summary": "Delete an application by ID. Applications contain external user identities and common settings for authentication methods.",
        "operationId": "AppIdentityService_DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Application ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppIdentityService"
        ]
      }
    },
    "/v1/events": {
      "get": {
        "summary": "List all events for an identity in an [end, start) time range, in descending timestamp order. Events are generated by identity actions.",
        "operationId": "EventService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "identityID",
            "description": "Identity ID (UUID).",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "description": "Events range end time. Defaults to current time if not specified. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTime",
            "description": "Events range start time. Defaults to end_time - 24 hours if not specified or after end_time. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/events/latest": {
      "get": {
        "summary": "List the latest event for each of an organization's identities. Events are generated by identity actions.",
        "operationId": "EventService_LatestEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LatestEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "appID",
            "description": "Application ID (UUID). If not specified, all applications are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identityID",
            "description": "Identity ID (UUID). If not specified, all identities are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/organizations": {
      "get": {
        "summary": "List all organizations. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_ListOrgs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListOrgsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of organizations to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "post": {
        "summary": "Create an organization. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_CreateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "org",
            "description": "Org message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Org",
              "required": [
                "org"
              ]
            }
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get an organization by ID. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Organization ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "delete": {
        "summary": "Delete an organization by ID. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_DeleteOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Organization ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/organizations/{org.id}": {
      "put": {
        "summary": "Update an organization. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_UpdateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "org.id",
            "description": "Organization ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "org",
            "description": "Org message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Organization name."
                },
                "status": {
                  "$ref": "#/definitions/api.Status",
                  "description": "Organization status."
                },
                "plan": {
                  "$ref": "#/definitions/Plan",
                  "description": "Organization plan.",
                  "readOnly": true
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Organization creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Organization modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "Org message to update."
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "patch": {
        "summary": "Update an organization. An organization is the top level resource and contains users, applications, and derived resources.",
        "operationId": "OrgService_UpdateOrg2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "org.id",
            "description": "Organization ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "org",
            "description": "Org message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Organization name."
                },
                "status": {
                  "$ref": "#/definitions/api.Status",
                  "description": "Organization status."
                },
                "plan": {
                  "$ref": "#/definitions/Plan",
                  "description": "Organization plan.",
                  "readOnly": true
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Organization creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Organization modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "Org message to update."
            }
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/sessions/keys": {
      "get": {
        "summary": "List all API keys. API keys are persistent and do not expire until revoked.",
        "operationId": "SessionService_ListKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of API keys to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      },
      "post": {
        "summary": "Create an API key. API keys are persistent and do not expire until revoked.",
        "operationId": "SessionService_CreateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateKeyResponse"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "description": "Key message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Key",
              "required": [
                "key"
              ]
            }
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v1/sessions/keys/{id}": {
      "delete": {
        "summary": "Delete an API key by ID. API keys are persistent and do not expire until revoked.",
        "operationId": "SessionService_DeleteKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Key ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SessionService"
        ]
      }
    },
    "/v1/sessions/login": {
      "post": {
        "summary": "Log in a user. Login tokens are time-limited and accompanied by an expiration.",
        "operationId": "SessionService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginRequest is sent to log in a user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ],
        "security": []
      }
    },
    "/v1/users": {
      "get": {
        "summary": "List users. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of users to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Create a user. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "User message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User",
              "required": [
                "user"
              ]
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get a user by ID. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "Delete a user by ID. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{id}/password": {
      "put": {
        "summary": "Update a user's password. Passwords are checked against NIST password guidelines.",
        "operationId": "UserService_UpdateUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to update password.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{user.id}": {
      "put": {
        "summary": "Update a user. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "User ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "description": "User message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orgID": {
                  "type": "string",
                  "description": "Organization ID (UUID).",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "User name."
                },
                "email": {
                  "type": "string",
                  "description": "User email."
                },
                "role": {
                  "$ref": "#/definitions/Role",
                  "description": "User role."
                },
                "status": {
                  "$ref": "#/definitions/api.Status",
                  "description": "User status."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "User creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "User modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "User message to update."
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "summary": "Update a user. Users can log in and use the Hermes API and OwnMFA website based on the limits of their role.",
        "operationId": "UserService_UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "User ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "description": "User message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orgID": {
                  "type": "string",
                  "description": "Organization ID (UUID).",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "User name."
                },
                "email": {
                  "type": "string",
                  "description": "User email."
                },
                "role": {
                  "$ref": "#/definitions/Role",
                  "description": "User role."
                },
                "status": {
                  "$ref": "#/definitions/api.Status",
                  "description": "User status."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "User creation timestamp.",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "User modification timestamp.",
                  "readOnly": true
                }
              },
              "title": "User message to update."
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "ActivateIdentityBody": {
      "type": "object",
      "properties": {
        "passcode": {
          "type": "string",
          "description": "Passcode for verification. For security questions identity methods, this is the answer to the security question."
        }
      },
      "description": "ActivateIdentityRequest is sent to activate an identity.",
      "required": [
        "passcode"
      ]
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Application ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Application name."
        },
        "displayName": {
          "type": "string",
          "description": "Application display name. Used anywhere the application is shown to an external user, including templates and notification sender fields."
        },
        "email": {
          "type": "string",
          "description": "Application email. Optional, used as the 'From' address in email notifications."
        },
        "pushoverKey": {
          "type": "string",
          "description": "Pushover application key. If not specified, the default OwnMFA Pushover application and templates will be used."
        },
        "subjectTemplate": {
          "type": "string",
          "description": "Application subject template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution is '{{.displayName}}'. Optional field, for notification methods that support subjects."
        },
        "textBodyTemplate": {
          "type": "string",
          "description": "Application text body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support text bodies. To prevent fraud, SMS notifications used a fixed body that includes the application display_name and verification code."
        },
        "htmlBodyTemplate": {
          "type": "string",
          "format": "byte",
          "description": "Application HTML body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/). The variables available for substitution are '{{.displayName}}' and '{{.passcode}}'. Optional field, for notification methods that support HTML bodies. When used in JSON, the value will be represented as a base64 string."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Application creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Application modification timestamp.",
          "readOnly": true
        }
      },
      "description": "App represents an application as stored in the database."
    },
    "AppleiOSTOTPMethod": {
      "type": "object",
      "description": "AppleiOSTOTPMethod configures an Apple iOS TOTP one-time password method."
    },
    "BackupsCodesMethod": {
      "type": "object",
      "properties": {
        "passcodes": {
          "type": "integer",
          "format": "int32",
          "description": "Number of passcodes provided."
        }
      },
      "description": "BackupsCodesMethod configures a backup codes method. Identities using this method are immediately activated and do not require activation."
    },
    "CreateIdentityResponse": {
      "type": "object",
      "properties": {
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "Identity message created."
        },
        "secret": {
          "type": "string",
          "description": "Secret in base32 format, for identity methods that provide secrets. Only returned once, upon identity creation."
        },
        "qr": {
          "type": "string",
          "format": "byte",
          "description": "Identity QR code, in Google Authenticator-compatible format, as a PNG image. For identity methods that provide secrets. Only returned once, upon identity creation. When used in JSON, the value will be represented as a base64 string."
        },
        "passcodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Passcode array, for identity methods that provide pregenerated passcodes. Only returned once, upon identity creation."
        }
      },
      "description": "CreateIdentityResponse is sent in response to an identity creation."
    },
    "CreateKeyResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/Key",
          "description": "Key message created."
        },
        "token": {
          "type": "string",
          "description": "Token to be used for subsequent calls. Only returned once, upon key creation."
        }
      },
      "description": "CreateKeyResponse is sent in response to an API key creation."
    },
    "EmailMethod": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address."
        }
      },
      "description": "EmailMethod configures an email passcode method."
    },
    "Event": {
      "type": "object",
      "properties": {
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID)."
        },
        "appID": {
          "type": "string",
          "description": "Application ID (UUID)."
        },
        "identityID": {
          "type": "string",
          "description": "Identity ID (UUID)."
        },
        "status": {
          "$ref": "#/definitions/EventStatus",
          "description": "Event status."
        },
        "error": {
          "type": "string",
          "description": "Error message. This field will be empty if no error was encountered."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Event creation timestamp."
        },
        "traceId": {
          "type": "string",
          "description": "Trace ID (UUID)."
        }
      },
      "description": "Event represents an event as stored in the database."
    },
    "EventStatus": {
      "type": "string",
      "enum": [
        "EVENT_STATUS_UNSPECIFIED",
        "IDENTITY_CREATED",
        "CHALLENGE_SENT",
        "CHALLENGE_NOOP",
        "CHALLENGE_FAIL",
        "ACTIVATE_SUCCESS",
        "ACTIVATE_FAIL",
        "VERIFY_SUCCESS",
        "VERIFY_FAIL",
        "IDENTITY_DELETED"
      ],
      "default": "EVENT_STATUS_UNSPECIFIED",
      "description": "EventStatus represents the status of an event.\n\n - EVENT_STATUS_UNSPECIFIED: Event status is not specified.\n - IDENTITY_CREATED: Identity was successfully created.\n - CHALLENGE_SENT: Challenge was successfully sent.\n - CHALLENGE_NOOP: Challenge was requested, but was not required by the identity's authentication method.\n - CHALLENGE_FAIL: Challenge failed to send. The Event error field will be populated.\n - ACTIVATE_SUCCESS: Identity was successfully activated.\n - ACTIVATE_FAIL: Identity failed to activate. The Event error field will be populated.\n - VERIFY_SUCCESS: Identity was successfully verified.\n - VERIFY_FAIL: Identity failed to verify. The Event error field will be populated.\n - IDENTITY_DELETED: Identity was successfully deleted."
    },
    "GoogleAuthHOTPMethod": {
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "Account name, such as username or email, for inclusion in QR codes. This field is never saved. If not specified, only the application display name is included in the returned QR code."
        }
      },
      "description": "GoogleAuthHOTPMethod configures a Google Authenticator HOTP one-time password method. This method is limited to 6-digit passcodes using the SHA1 hash function."
    },
    "GoogleAuthTOTPMethod": {
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "Account name, such as username or email, for inclusion in QR codes. This field is never saved. If not specified, only the application display name is included in the returned QR code."
        }
      },
      "description": "GoogleAuthTOTPMethod configures a Google Authenticator or Microsoft Authenticator TOTP one-time password method. This method is limited to 6-digit passcodes using the SHA1 hash function."
    },
    "HardwareHOTPMethod": {
      "type": "object",
      "properties": {
        "hash": {
          "$ref": "#/definitions/Hash",
          "description": "Hardware HOTP hash function. Defaults to SHA512 if not specified."
        },
        "digits": {
          "type": "integer",
          "format": "int32",
          "description": "Passcode digits length."
        },
        "counter": {
          "type": "integer",
          "format": "int32",
          "description": "Hardware HOTP starting counter. Only included during identity creation. Defaults to 0 if not specified."
        },
        "secret": {
          "type": "string",
          "format": "byte",
          "description": "Hardware HOTP secret. Only included during identity creation. When used in JSON, the value will be represented as a base64 string."
        }
      },
      "description": "HardwareHOTPMethod configures a hardware OATH HOTP one-time password method."
    },
    "HardwareTOTPMethod": {
      "type": "object",
      "properties": {
        "hash": {
          "$ref": "#/definitions/Hash",
          "description": "Hardware TOTP hash function. Defaults to SHA512 if not specified."
        },
        "digits": {
          "type": "integer",
          "format": "int32",
          "description": "Passcode digits length."
        },
        "secret": {
          "type": "string",
          "format": "byte",
          "description": "Hardware TOTP secret. Only included during identity creation. When used in JSON, the value will be represented as a base64 string."
        }
      },
      "description": "HardwareTOTPMethod configures a hardware OATH TOTP one-time password method."
    },
    "Hash": {
      "type": "string",
      "enum": [
        "SHA512",
        "SHA256",
        "SHA1"
      ],
      "default": "SHA512",
      "description": "Hash represents a hash function.\n\n - SHA512: SHA-2 512 bits.\n - SHA256: SHA-2 256 bits.\n - SHA1: SHA-1."
    },
    "Identity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identity ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "appID": {
          "type": "string",
          "description": "Application ID (UUID).",
          "readOnly": true
        },
        "comment": {
          "type": "string",
          "description": "Identity comment. This should be an opaque identifier known to the consuming application."
        },
        "status": {
          "$ref": "#/definitions/IdentityStatus",
          "description": "Identity status.",
          "readOnly": true
        },
        "softwareHOTPMethod": {
          "$ref": "#/definitions/SoftwareHOTPMethod",
          "description": "Software HOTP method configuration."
        },
        "softwareTOTPMethod": {
          "$ref": "#/definitions/SoftwareTOTPMethod",
          "description": "Software TOTP method configuration."
        },
        "googleAuthHOTPMethod": {
          "$ref": "#/definitions/GoogleAuthHOTPMethod",
          "description": "Google Authenticator HOTP method configuration."
        },
        "googleAuthTOTPMethod": {
          "$ref": "#/definitions/GoogleAuthTOTPMethod",
          "description": "Google Authenticator TOTP method configuration."
        },
        "appleiOSTOTPMethod": {
          "$ref": "#/definitions/AppleiOSTOTPMethod",
          "description": "Apple iOS TOTP method configuration."
        },
        "hardwareHOTPMethod": {
          "$ref": "#/definitions/HardwareHOTPMethod",
          "description": "Hardware HOTP method configuration."
        },
        "hardwareTOTPMethod": {
          "$ref": "#/definitions/HardwareTOTPMethod",
          "description": "Hardware TOTP method configuration."
        },
        "smsMethod": {
          "$ref": "#/definitions/SMSMethod",
          "description": "SMS method configuration."
        },
        "pushoverMethod": {
          "$ref": "#/definitions/PushoverMethod",
          "description": "Pushover method configuration."
        },
        "emailMethod": {
          "$ref": "#/definitions/EmailMethod",
          "description": "Email method configuration."
        },
        "backupCodesMethod": {
          "$ref": "#/definitions/BackupsCodesMethod",
          "description": "Backups codes method configuration."
        },
        "securityQuestionsMethod": {
          "$ref": "#/definitions/SecurityQuestionsMethod",
          "description": "Security questions method configuration."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Identity creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Identity modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Identity represents an identity as stored in the database.",
      "required": [
        "comment"
      ]
    },
    "IdentityStatus": {
      "type": "string",
      "enum": [
        "UNVERIFIED",
        "ACTIVATED"
      ],
      "default": "UNVERIFIED",
      "description": "IdentityStatus represents the status of an identity.\n\n - UNVERIFIED: Identity is not yet verified.\n - ACTIVATED: Identity has been activated."
    },
    "Key": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Key ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Key name."
        },
        "role": {
          "$ref": "#/definitions/Role",
          "description": "Key role."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Key creation timestamp.",
          "readOnly": true
        }
      },
      "description": "Key represents an API key as stored in the database. API keys are not tied to a specific user.",
      "required": [
        "name",
        "role"
      ]
    },
    "LatestEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Event"
          },
          "description": "Event array, ordered by descending created_at timestamp."
        }
      },
      "description": "LatestEventsResponse is sent in response to an organization latest list."
    },
    "ListAppsResponse": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/App"
          },
          "description": "App array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of applications available."
        }
      },
      "description": "ListAppsResponse is sent in response to an application list."
    },
    "ListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Event"
          },
          "description": "Event array, ordered by descending created_at timestamp."
        }
      },
      "description": "ListEventsResponse is sent in response to an identity events list."
    },
    "ListIdentitiesResponse": {
      "type": "object",
      "properties": {
        "identities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Identity"
          },
          "description": "Identity array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of identities available."
        }
      },
      "description": "ListIdentitiesResponse is sent in response to an identity list."
    },
    "ListKeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Key"
          },
          "description": "Key array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of API keys available."
        }
      },
      "description": "ListKeysResponse is sent in response to an API key list."
    },
    "ListOrgsResponse": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Org"
          },
          "description": "Org array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of organizations available."
        }
      },
      "description": "ListOrgsResponse is sent in response to an organization list."
    },
    "ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/User"
          },
          "description": "User array, ordered by ascending created_at timestamp. The completeness of the array will depend on whether the request was made by an admin user, non-admin user, or API key."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of users available."
        }
      },
      "description": "ListUsersResponse is sent in response to a user list."
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the user to log in."
        },
        "orgName": {
          "type": "string",
          "description": "Organization name of the user to log in."
        },
        "password": {
          "type": "string",
          "description": "Password of the user to log in."
        }
      },
      "description": "LoginRequest is sent to log in a user.",
      "required": [
        "email",
        "orgName",
        "password"
      ]
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token to be used for subsequent non-login calls."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Token expiration timestamp."
        }
      },
      "description": "LoginResponse is sent in response to a user login."
    },
    "Org": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Organization name."
        },
        "status": {
          "$ref": "#/definitions/api.Status",
          "description": "Organization status."
        },
        "plan": {
          "$ref": "#/definitions/Plan",
          "description": "Organization plan.",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Organization creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Organization modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Org represents an organization as stored in the database."
    },
    "Plan": {
      "type": "string",
      "enum": [
        "PLAN_UNSPECIFIED",
        "PAYMENT_FAIL",
        "STARTER",
        "PRO",
        "ENTERPRISE"
      ],
      "default": "PLAN_UNSPECIFIED",
      "description": "Plan represents the plan and associated capabilities of an organization.\n\n - PLAN_UNSPECIFIED: Plan is not specified.\n - PAYMENT_FAIL: Payment has failed and the organization is restricted to Starter plan capabilities.\n - STARTER: Starter plan supports software and hardware OATH one-time password authentication methods, up to a limited number of identities.\n - PRO: Pro plan supports all authentication methods and includes email support.\n - ENTERPRISE: Enterprise plan supports all authentication methods and includes email and phone support."
    },
    "PushoverMethod": {
      "type": "object",
      "properties": {
        "pushoverKey": {
          "type": "string",
          "description": "Pushover user key."
        }
      },
      "description": "PushoverMethod configures a Pushover passcode method."
    },
    "Role": {
      "type": "string",
      "enum": [
        "ROLE_UNSPECIFIED",
        "VIEWER",
        "AUTHENTICATOR",
        "ADMIN",
        "SYS_ADMIN"
      ],
      "default": "ROLE_UNSPECIFIED",
      "description": "Role represents the role of a user.\n\n - ROLE_UNSPECIFIED: Role is not specified.\n - VIEWER: Viewers can only read resources in their organization, but can update their own user.\n - AUTHENTICATOR: Authenticators can read and modify resources in their organization, but can only update their own user.\n - ADMIN: Admins can read and modify anything in their organization, including creating users of an equal or lesser role.\n - SYS_ADMIN: System admins can create organizations and modify anything in their organization."
    },
    "SMSMethod": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "description": "Phone number. Must be in valid [E.164](https://www.twilio.com/docs/glossary/what-e164) format."
        }
      },
      "description": "SMSMethod configures an SMS passcode method."
    },
    "SecurityQuestionsMethod": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "Answer to the security question. Only included during identity creation. The security question should be stored out-of-band and queried of an external user by the consuming application."
        }
      },
      "description": "SecurityQuestionsMethod configures a security questions method. Identities using this method are immediately activated and do not require activation."
    },
    "SoftwareHOTPMethod": {
      "type": "object",
      "properties": {
        "hash": {
          "$ref": "#/definitions/Hash",
          "description": "Software HOTP hash function. Defaults to SHA512 if not specified."
        },
        "digits": {
          "type": "integer",
          "format": "int32",
          "description": "Passcode digits length. Defaults to 7 if not specified."
        },
        "counter": {
          "type": "integer",
          "format": "int32",
          "description": "Software HOTP starting counter. Only included during identity creation. Defaults to 0 if not specified."
        },
        "accountName": {
          "type": "string",
          "description": "Account name, such as username or email, for inclusion in QR codes. This field is never saved. If not specified, only the application display name is included in the returned QR code."
        }
      },
      "description": "SoftwareHOTPMethod configures a software OATH HOTP one-time password method."
    },
    "SoftwareTOTPMethod": {
      "type": "object",
      "properties": {
        "hash": {
          "$ref": "#/definitions/Hash",
          "description": "Software TOTP hash function. Defaults to SHA512 if not specified."
        },
        "digits": {
          "type": "integer",
          "format": "int32",
          "description": "Passcode digits length. Defaults to 7 if not specified."
        },
        "accountName": {
          "type": "string",
          "description": "Account name, such as username or email, for inclusion in QR codes. This field is never saved. If not specified, only the application display name is included in the returned QR code."
        }
      },
      "description": "SoftwareTOTPMethod configures a software OATH TOTP one-time password method."
    },
    "UpdateUserPasswordBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "User password to update."
        }
      },
      "description": "UpdateUserPasswordRequest is sent to update a user's password.",
      "required": [
        "password"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "User name."
        },
        "email": {
          "type": "string",
          "description": "User email."
        },
        "role": {
          "$ref": "#/definitions/Role",
          "description": "User role."
        },
        "status": {
          "$ref": "#/definitions/api.Status",
          "description": "User status."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "User creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "User modification timestamp.",
          "readOnly": true
        }
      },
      "description": "User represents a user as stored in the database."
    },
    "VerifyIdentityBody": {
      "type": "object",
      "properties": {
        "passcode": {
          "type": "string",
          "description": "Passcode for verification. For security questions identity methods, this is the answer to the security question."
        }
      },
      "description": "VerifyIdentityRequest is sent to verify an identity. If verification fails, the request does not automatically fall through to a backup codes method. Consuming applications should design a workflow that either explicitly verifies by backup codes or falls through on failure.",
      "required": [
        "passcode"
      ]
    },
    "api.Status": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ACTIVE",
        "DISABLED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "Status represents the status of a message.\n\n - STATUS_UNSPECIFIED: Status is not specified.\n - ACTIVE: Message subject is active.\n - DISABLED: Message subject is disabled."
    },
    "rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Any"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "TokenAuth": {
      "type": "apiKey",
      "description": "Enter your token (/v1/sessions/login) in the format **Bearer \u0026lt;token\u0026gt;**",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "TokenAuth": []
    }
  ],
  "externalDocs": {
    "description": "Protobuf + gRPC definitions and example code",
    "url": "https://github.com/ownmfa/proto"
  }
}
