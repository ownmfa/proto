syntax = "proto3";
package ownmfa.api;

import "api/ownmfa_role.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/ownmfa/api/go/api";

// SessionService contains functions to create sessions and keys.
service SessionService {
  // Log in a user. Login tokens are time-limited and accompanied by an expiration.
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/sessions/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {}
    };
  }

  // Create an API key. API keys are persistent and do not expire until revoked.
  rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse) {
    option (google.api.http) = {
      post: "/v1/sessions/keys"
      body: "key"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".ownmfa.api.CreateKeyResponse"
            }
          }
        }
      }
    };
  }

  // Delete an API key by ID. API keys are persistent and do not expire until revoked.
  rpc DeleteKey(DeleteKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/sessions/keys/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all API keys. API keys are persistent and do not expire until revoked.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse) {
    option (google.api.http) = {
      get: "/v1/sessions/keys"
    };
  }
}

// LoginRequest is sent to log in a user.
message LoginRequest {
  // Email of the user to log in.
  string email = 1 [(google.api.field_behavior) = REQUIRED];

  // Organization name of the user to log in.
  string org_name = 2 [(google.api.field_behavior) = REQUIRED];

  // Password of the user to log in.
  string password = 3 [(google.api.field_behavior) = REQUIRED];
}

// LoginResponse is sent in response to a user login.
message LoginResponse {
  // Token to be used for subsequent non-login calls.
  string token = 1;

  // Token expiration timestamp.
  google.protobuf.Timestamp expires_at = 2;
}

// Key represents an API key as stored in the database. API keys are not tied to a specific user.
message Key {
  // Key ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization ID (UUID).
  string org_id = 2 [json_name = "orgID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Key name.
  string name = 3 [(validate.rules).string = {min_len: 5, max_len: 80}, (google.api.field_behavior) = REQUIRED];

  // Key role.
  Role role = 4 [(validate.rules).enum = {in: [4, 8, 12, 15]}, (google.api.field_behavior) = REQUIRED];

  // Key creation timestamp.
  google.protobuf.Timestamp created_at = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateKeyRequest is sent to create an API key.
message CreateKeyRequest {
  // Key message to create.
  Key key = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// CreateKeyResponse is sent in response to an API key creation.
message CreateKeyResponse {
  // Key message created.
  Key key = 1;

  // Token to be used for subsequent calls. Only returned once, upon key creation.
  string token = 2;
}

// DeleteKeyRequest is sent to delete an API key.
message DeleteKeyRequest {
  // Key ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListKeysRequest is sent to list API keys.
message ListKeysRequest {
  // Number of API keys to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32.lte = 250];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;
}

// ListKeysResponse is sent in response to an API key list.
message ListKeysResponse {
  // Key array, ordered by ascending created_at timestamp.
  repeated Key keys = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of API keys available.
  int32 total_size = 3;
}
